snippet def
	def ${1:method_name}
		${2}
	end
snippet deft
	def test_${1:case_name}
		${2}
	end
snippet defi
	def initialize(${1:args})
		${2}
	end
snippet init
	initialize
snippet cla class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet class class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet classi
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		def initialize(${2:args})
			${3}
		end

	end
snippet mod
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet r
	attr_reader :${1:attr_names}
snippet w
	attr_writer :${1:attr_names}
snippet rw
	attr_accessor :${1:attr_names}
snippet defs
	def self.${1:class_method_name}
		${2}
	end
snippet defmm
	def method_missing(meth, *args, &blk)
		${1}
	end
